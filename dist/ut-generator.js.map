{"version":3,"file":"ut-generator.js","sources":["../src/index.ts","../src/ut-generator.ts"],"sourcesContent":["/**\n * @module GlobalTypesGenerator\n * @description Provides a utility for generating global TypeScript type declarations from project files.\n * @author Your Name\n * @exports GlobalTypesGenerator\n * @exports defaultPathConfig\n */\n\nimport ts, {\n\ttype CompilerOptions,\n\ttype SourceFile,\n\ttype EnumDeclaration,\n\ttype InterfaceDeclaration,\n\ttype ClassDeclaration,\n} from 'typescript'\nimport fs from 'node:fs'\nimport path from 'node:path'\nimport { styleText } from 'node:util'\n\nconst defaultPathConfig = 'tsconfig.declaration.json'\n\n/**\n * @class GlobalTypesGenerator\n * @classdesc A class to generate global TypeScript type declarations based on the provided tsconfig settings.\n */\nclass UnifiedTypesGenerator {\n\t/**\n\t * @private\n\t * @type {string}\n\t */\n\tprivate tsConfigPath: string\n\n\t/**\n\t * @private\n\t * @type {string}\n\t */\n\tprivate cwd: string\n\n\t/**\n\t * @private\n\t * @type {Object}\n\t */\n\tprivate tsConfigOptions: {\n\t\tcompilerOptions: CompilerOptions\n\t\tinclude: Array<string>\n\t\texclude: Array<string>\n\t}\n\n\t/**\n\t * @constructor\n\t * @param {string} [tsConfigPath=defaultPathConfig] - Path to the TypeScript configuration file.\n\t */\n\tconstructor(tsConfigPath?: string) {\n\t\tthis.cwd = process.cwd()\n\t\tthis.tsConfigPath = path.resolve(this.cwd, tsConfigPath || defaultPathConfig)\n\t}\n\n\t/**\n\t * @private\n\t * @method getParametersSignature\n\t * @description Constructs a parameter signature string for method declarations.\n\t * @param {ts.MethodSignature} method - The TypeScript method signature.\n\t * @param {ts.SourceFile} sourceFile - The source file containing the method.\n\t * @returns {string}\n\t */\n\tprivate getParametersSignature(method: ts.MethodSignature, sourceFile: ts.SourceFile): string {\n\t\treturn method.parameters\n\t\t\t.map((parameter) => {\n\t\t\t\tconst name = parameter.name.getText(sourceFile)\n\t\t\t\tconst type = parameter.type ? parameter.type.getText(sourceFile) : 'unknown'\n\t\t\t\tconst optional = parameter.questionToken ? '?' : ''\n\t\t\t\treturn `${name}${optional}: ${type}`\n\t\t\t})\n\t\t\t.join(', ')\n\t}\n\n\t/**\n\t * @async\n\t * @method generateNamespaceFromFile\n\t * @description Generates TypeScript namespace declarations from a source file.\n\t * @param {string} filePath - The file path to generate declarations from.\n\t * @returns {Promise<string|null>}\n\t */\n\tprivate async generateNamespaceFromFile(filePath: string): Promise<string | null> {\n\t\tconst program = ts.createProgram([filePath], this.tsConfigOptions.compilerOptions)\n\t\tconst sourceFile = program.getSourceFile(filePath)\n\n\t\tif (!sourceFile) {\n\t\t\tconsole.error(`Unable to retrieve source file for ${filePath}`)\n\t\t\treturn null\n\t\t}\n\n\t\tlet declarations = ''\n\n\t\tts.forEachChild(sourceFile, (node) => {\n\t\t\tif (ts.isEnumDeclaration(node) && node.name) {\n\t\t\t\tdeclarations += this.generateTypeEnumeration(node, sourceFile)\n\t\t\t} else if (ts.isClassDeclaration(node) && node.name) {\n\t\t\t\tdeclarations += this.generateTypeClase(node, sourceFile)\n\t\t\t} else if (ts.isInterfaceDeclaration(node) && node.name) {\n\t\t\t\tdeclarations += this.generateTypeInterface(node, sourceFile)\n\t\t\t}\n\t\t})\n\n\t\treturn declarations ? declarations : null\n\t}\n\n\t/**\n\t * @private\n\t * @method getFiles\n\t * @description Retrieves file paths from the tsconfig settings.\n\t * @returns {string[]}\n\t * @throws {Error} If the root directory is not specified in tsconfig.\n\t */\n\tprivate getFiles(): string[] {\n\t\tif (!this.tsConfigOptions.compilerOptions.rootDir)\n\t\t\tthrow new Error(`Expected rootDir option in ${this.tsConfigPath} session compilerOptions`)\n\n\t\tlet fileNames = fs.readdirSync(path.resolve(this.tsConfigOptions.compilerOptions.rootDir), {\n\t\t\trecursive: true,\n\t\t}) as string[]\n\n\t\tconst patterns = this.tsConfigOptions.include.map((includePath) => {\n\t\t\treturn includePath.split('*.').at(-1)\n\t\t})\n\n\t\treturn fileNames.filter((fileName) => {\n\t\t\treturn patterns.find((pattern) => fileName.includes(pattern as string))\n\t\t})\n\t}\n\n\t/**\n\t * @async\n\t * @private\n\t * @method setTsConfig\n\t * @description Reads and parses the TypeScript configuration file.\n\t */\n\tprivate async setTsConfig(): Promise<void> {\n\t\tthis.tsConfigOptions = JSON.parse(\n\t\t\tfs.readFileSync(this.tsConfigPath, { encoding: 'utf-8' }).toString()\n\t\t)\n\t}\n\n\t/**\n\t * @async\n\t * @public\n\t * @method run\n\t * @description Main method to execute the types generation process.\n\t * @example\n\t * const generator = new GlobalTypesGenerator();\n\t * await generator.run();\n\t */\n\tpublic async run() {\n\t\tconsole.log(styleText('white', styleText('bgGreen', 'Reading tsconfig file ....')))\n\t\tawait this.setTsConfig()\n\n\t\tif (!this.tsConfigOptions.compilerOptions || !this.tsConfigOptions.compilerOptions.outFile)\n\t\t\tthrow new Error(`Expected outFile option in ${this.tsConfigPath} session compilerOptions`)\n\n\t\tconst files = this.getFiles()\n\n\t\tlet outputContent = ''\n\n\t\tfor (const file of files) {\n\t\t\tconst filePath = path.join(this.tsConfigOptions.compilerOptions.rootDir as string, file)\n\t\t\tconsole.log(styleText('greenBright', `Generating types for: \\n ${filePath} `))\n\n\t\t\tconst data = await this.generateNamespaceFromFile(filePath)\n\n\t\t\tif (data) outputContent += data + '\\n'\n\t\t}\n\n\t\tconst globalDeclaration = `${outputContent} \\n`\n\t\tconst outputFile = path.resolve(\n\t\t\tthis.cwd,\n\t\t\tthis.tsConfigOptions.compilerOptions.outFile as string\n\t\t)\n\t\tfs.writeFileSync(outputFile, globalDeclaration, { encoding: 'utf-8' })\n\n\t\tconsole.log(styleText('bold', styleText('greenBright', `....: \\n\\n\\n Done!!! \\n\\n\\n\\n `)))\n\n\t\tconsole.log(\n\t\t\tstyleText('bold', styleText('greenBright', `The type file was generated in:  \\n`)),\n\t\t\tstyleText('whiteBright', outputFile)\n\t\t)\n\t}\n\n\t/**\n\t * @private\n\t * @method generateTypeEnumeration\n\t * @description Generates TypeScript enumeration type declarations from an enum node.\n\t * @param {EnumDeclaration} node - The TypeScript enumeration declaration.\n\t * @param {SourceFile} sourceFile - The source file containing the enum declaration.\n\t * @returns {string} The generated TypeScript enumeration declaration.\n\t */\n\tprivate generateTypeEnumeration(node: EnumDeclaration, sourceFile: SourceFile): string {\n\t\tlet declarations = ''\n\t\tlet membersInfo = ''\n\t\tnode.members.forEach((member) => {\n\t\t\tconst memberName = member.name.getText(sourceFile)\n\t\t\tconst memberValue = member.initializer ? member.initializer.getText(sourceFile) : ''\n\t\t\tmembersInfo += `  ${memberName}=${memberValue},\\n`\n\t\t})\n\n\t\tdeclarations += `declare enum ${node.name.text} {\\n${membersInfo}}\\n`\n\t\treturn declarations\n\t}\n\n\t/**\n\t * @private\n\t * @method generateTypeInterface\n\t * @description Generates TypeScript interface declarations from an interface node.\n\t * @param {InterfaceDeclaration} node - The TypeScript interface declaration.\n\t * @param {SourceFile} sourceFile - The source file containing the interface declaration.\n\t * @returns {string} The generated TypeScript interface declaration.\n\t */\n\tprivate generateTypeInterface(node: InterfaceDeclaration, sourceFile: SourceFile): string {\n\t\tlet declarations = ''\n\t\tlet membersInfo = ''\n\n\t\tnode.members.forEach((member) => {\n\t\t\tif (ts.isPropertySignature(member) && member.name) {\n\t\t\t\tconst propertyName = member.name.getText(sourceFile)\n\t\t\t\tconst propertyType = member.type ? member.type.getText(sourceFile) : 'unknown'\n\t\t\t\tmembersInfo += `  ${propertyName}: ${propertyType};\\n`\n\t\t\t} else if (ts.isMethodSignature(member) && member.name) {\n\t\t\t\tconst methodName = member.name.getText(sourceFile)\n\t\t\t\tconst parameters = this.getParametersSignature(member, sourceFile)\n\t\t\t\tconst returnType = member.type ? member.type.getText(sourceFile) : 'unknown'\n\t\t\t\tmembersInfo += `  ${methodName}(${parameters}): ${returnType};\\n`\n\t\t\t}\n\t\t})\n\n\t\tdeclarations += `declare interface ${node.name.text} {\\n${membersInfo}}\\n`\n\t\treturn declarations\n\t}\n\n\t/**\n\t * @private\n\t * @method generateTypeClase\n\t * @description Generates TypeScript class type declarations from a class node.\n\t * @param {ClassDeclaration} node - The TypeScript class declaration.\n\t * @param {SourceFile} sourceFile - The source file containing the class declaration.\n\t * @returns {string} The generated TypeScript class declaration.\n\t */\n\tprivate generateTypeClase(node: ClassDeclaration, sourceFile: SourceFile): string {\n\t\tlet declarations = ''\n\t\tlet membersInfo = ''\n\n\t\tif (!node.name) return ''\n\n\t\tnode.members.forEach((member) => {\n\t\t\tif (ts.isPropertyDeclaration(member) && member.name) {\n\t\t\t\tconst propertyName = member.name.getText(sourceFile)\n\t\t\t\tconst propertyType = member.type ? member.type.getText(sourceFile) : 'unknown'\n\t\t\t\tmembersInfo += `    ${propertyName}: ${propertyType};\\n`\n\t\t\t} else if (ts.isMethodDeclaration(member) && member.name) {\n\t\t\t\tconst methodName = member.name.getText(sourceFile)\n\t\t\t\tconst methodSignature = member.type ? member.type.getText(sourceFile) : 'unknown'\n\n\t\t\t\tlet parameters = ''\n\n\t\t\t\tmember.parameters.forEach((param) => {\n\t\t\t\t\tconst paramName = param.name.getText(sourceFile)\n\t\t\t\t\tconst paramType = param.type ? param.type.getText(sourceFile) : 'unknown'\n\t\t\t\t\tparameters += `${paramName}: ${paramType}`\n\t\t\t\t})\n\n\t\t\t\tmembersInfo += `  ${methodName}(${parameters}): ${methodSignature};\\n`\n\t\t\t} else if (ts.isConstructorDeclaration(member)) {\n\t\t\t\tlet parameters = ''\n\n\t\t\t\tmember.parameters.forEach((param) => {\n\t\t\t\t\tconst paramName = param.name.getText(sourceFile)\n\t\t\t\t\tconst paramType = param.type ? param.type.getText(sourceFile) : 'unknown'\n\t\t\t\t\tparameters += `${paramName}: ${paramType}`\n\t\t\t\t})\n\n\t\t\t\tmembersInfo += `  constructor(${parameters});\\n`\n\t\t\t}\n\t\t})\n\n\t\tdeclarations += `declare class ${node.name.text} {\\n${membersInfo}}\\n`\n\t\treturn declarations\n\t}\n}\n\nexport { UnifiedTypesGenerator, defaultPathConfig }\n","import { UnifiedTypesGenerator, defaultPathConfig } from '.'\n\nconst main = async () => {\n\ttry {\n\t\tconst args = process.argv.slice(2)\n\n\t\tconst path = args && args[0] ? args[0] : defaultPathConfig\n\n\t\tawait new UnifiedTypesGenerator(path).run()\n\t} catch (err) {\n\t\tconsole.log(err)\n\t}\n}\n\nmain()\n"],"names":["styleText"],"mappings":"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"}